{
  "nbformat": 4,
  "nbformat_minor": 5,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    },
    "colab": {
      "name": "Problem-2.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "quiet-stone"
      },
      "source": [
        "import numpy as np\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import pandas as pd\n"
      ],
      "id": "quiet-stone",
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1zYA_ygj_6iY"
      },
      "source": [
        "data = pd.read_json('https://raw.githubusercontent.com/Karrthik-Arya/Moodify-Learning/master/Assignment-2/data.json')\n",
        "data.columns = ['x', 'y', 'label']"
      ],
      "id": "1zYA_ygj_6iY",
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "id": "vvhbgMpJElk9",
        "outputId": "30f0b019-673e-499a-927d-c7a8e782f95a"
      },
      "source": [
        "data.head()"
      ],
      "id": "vvhbgMpJElk9",
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x</th>\n",
              "      <th>y</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-3.005382</td>\n",
              "      <td>-1.701191</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-2.908105</td>\n",
              "      <td>-1.699589</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-2.958954</td>\n",
              "      <td>-1.660940</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-2.922840</td>\n",
              "      <td>-1.638722</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-2.924240</td>\n",
              "      <td>-1.508256</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          x         y  label\n",
              "0 -3.005382 -1.701191      1\n",
              "1 -2.908105 -1.699589      1\n",
              "2 -2.958954 -1.660940      1\n",
              "3 -2.922840 -1.638722      1\n",
              "4 -2.924240 -1.508256      1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TtWRPS9RE_Ve",
        "outputId": "dda8f2cd-e8af-433c-e02c-78a7c12877a7"
      },
      "source": [
        "data['label'].value_counts()"
      ],
      "id": "TtWRPS9RE_Ve",
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    4679\n",
              "0    1321\n",
              "Name: label, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "H6bhvyukFkUU",
        "outputId": "29864f44-a873-4a1e-f04b-a2ba5190935d"
      },
      "source": [
        "def plot_scatter_shape(data, cols, shape_col = 'label', col_y = 'y', alpha = 0.2):\n",
        "    shapes = ['+', 'o', 's', 'x', '^'] # pick distinctive shapes\n",
        "    unique_cats = data[shape_col].unique()\n",
        "    for col in cols: # loop over the columns to plot\n",
        "        sns.set_style(\"whitegrid\")\n",
        "        for i, cat in enumerate(unique_cats): # loop over the unique categories\n",
        "            temp = data[data[shape_col] == cat]\n",
        "            sns.regplot(x=col, y=col_y, data=temp, marker = shapes[i], label = cat,\n",
        "                        scatter_kws={\"alpha\":alpha}, fit_reg = False, color = 'blue')\n",
        "        plt.title('Scatter plot of ' + col_y + ' vs. ' + col) # Give the plot a main title\n",
        "        plt.xlabel(col) # Set text for the x axis\n",
        "        plt.ylabel(col_y)# Set text for y axis\n",
        "        plt.legend()\n",
        "        plt.show()\n",
        "plot_scatter_shape(data, ['x'], alpha = 0.05)"
      ],
      "id": "H6bhvyukFkUU",
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AWvoHFQysXuP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "18c35c2d-77dd-4729-a5d1-81f4aa1cc0eb"
      },
      "source": [
        "data_test = data.sample(frac = 0.2, random_state=200)\n",
        "data_train = data.drop(data_test.index)\n",
        "print(data_test.shape)\n",
        "print(data_train.shape)\n",
        "data_train.reset_index(drop = True, inplace= True)\n",
        "data_test.reset_index(drop = True, inplace= True)"
      ],
      "id": "AWvoHFQysXuP",
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1200, 3)\n",
            "(4800, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3f8STehIvwos",
        "outputId": "d0a6ec70-bc99-4738-a785-ebb8b7942f51"
      },
      "source": [
        "def fn(x,y,coef):\n",
        "  fx = 0\n",
        "  for i in range(5):\n",
        "    fx += coef[i]*(x**(4-i))*(y**i)\n",
        "  return fx\n",
        "coef = [0.005,0.005,0.005,0.005,0.005]\n",
        "results = fn(data_train['x'], data_train['y'], coef)\n",
        "print(results)\n",
        "results = 1/(1+np.exp(-1*results))\n",
        "print(results)\n"
      ],
      "id": "3f8STehIvwos",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0       0.801862\n",
            "1       0.825046\n",
            "2       0.784583\n",
            "3       0.727491\n",
            "4       0.743629\n",
            "          ...   \n",
            "4795    0.690913\n",
            "4796    0.650474\n",
            "4797    0.773792\n",
            "4798    0.695778\n",
            "4799    0.781722\n",
            "Length: 4800, dtype: float64\n",
            "0       0.690373\n",
            "1       0.695306\n",
            "2       0.686667\n",
            "3       0.674255\n",
            "4       0.677789\n",
            "          ...   \n",
            "4795    0.666170\n",
            "4796    0.657117\n",
            "4797    0.684341\n",
            "4798    0.667251\n",
            "4799    0.686051\n",
            "Length: 4800, dtype: float64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MXne-jrpY8_O",
        "outputId": "ce4cec45-005c-42c3-c25e-36117efb957e"
      },
      "source": [
        "loss = -data_train['label']*np.log(results) - (1-data_train['label'])*np.log(1-results)\n",
        "loss = loss.sum()\n",
        "print(loss)"
      ],
      "id": "MXne-jrpY8_O",
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3119.3696757798043\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gUI6Xp3tpY0n",
        "outputId": "c9c01426-6980-4269-e6b3-ff78b7088990"
      },
      "source": [
        "lr = 0.0006\n",
        "def sgn(a):\n",
        "  b = abs(a)\n",
        "  return a/b\n",
        "\n",
        "def grada1(data, coef ):\n",
        "  X = data['x']\n",
        "  Y = data['y']\n",
        "  l = data['label']\n",
        "  val = coef[0]*X**4+coef[1]*(X**3)*Y+coef[2]*(X**2)*(Y**2)+coef[3]*(X**1)*(Y**3)+coef[4]*(Y**4)\n",
        "  grad = -(l/val)*(X**4)+((1-l)/(1-val))*(X**4)\n",
        "  return grad.sum()\n",
        "def grada2(data, coef ):\n",
        "  X = data['x']\n",
        "  Y = data['y']\n",
        "  l = data['label']\n",
        "  val = coef[0]*X**4+coef[1]*(X**3)*Y+coef[2]*(X**2)*(Y**2)+coef[3]*(X**1)*(Y**3)+coef[4]*(Y**4)\n",
        "  grad = -(l/val)*(X**3*Y)+((1-l)/(1-val))*(X**3*Y)\n",
        "  return grad.sum()\n",
        "def grada3(data, coef ):\n",
        "  X = data['x']\n",
        "  Y = data['y']\n",
        "  l = data['label']\n",
        "  val = coef[0]*X**4+coef[1]*(X**3)*Y+coef[2]*(X**2)*(Y**2)+coef[3]*(X**1)*(Y**3)+coef[4]*(Y**4)\n",
        "  grad = -(l/val)*(X**2*Y**2)+((1-l)/(1-val))*(X**2*Y**2)\n",
        "  return grad.sum()\n",
        "def grada4(data, coef ):\n",
        "  X = data['x']\n",
        "  Y = data['y']\n",
        "  l = data['label']\n",
        "  val = coef[0]*X**4+coef[1]*(X**3)*Y+coef[2]*(X**2)*(Y**2)+coef[3]*(X**1)*(Y**3)+coef[4]*(Y**4)\n",
        "  grad = -(l/val)*(X*(Y**3))+((1-l)/(1-val))*(X*(Y**3))\n",
        "  return grad.sum()\n",
        "def grada5(data, coef ):\n",
        "  X = data['x']\n",
        "  Y = data['y']\n",
        "  l = data['label']\n",
        "  val = coef[0]*X**4+coef[1]*(X**3)*Y+coef[2]*(X**2)*(Y**2)+coef[3]*(X**1)*(Y**3)+coef[4]*(Y**4)\n",
        "  grad = -(l/val)*(Y**4)+((1-l)/(1-val))*(Y**4)\n",
        "  return grad.sum()\n",
        "  \n",
        "\n",
        "\n",
        "for i in range(750):\n",
        "  coef[0] = coef[0] - lr*sgn(grada1(data, coef))\n",
        "  coef[1] = coef[1] - lr*sgn(grada2(data, coef))\n",
        "  coef[2] = coef[2] - lr*sgn(grada3(data, coef))\n",
        "  coef[3] = coef[3] - lr*sgn(grada4(data, coef))\n",
        "  coef[4] = coef[4] - lr*sgn(grada5(data, coef))\n",
        "results = fn(data_train['x'], data_train['y'], coef)\n",
        "results = 1/(1+np.exp(-1*results))\n",
        "loss = -data_train['label']*np.log(results) - (1-data_train['label'])*np.log(1-results)\n",
        "loss = loss.sum()\n",
        "print(loss)\n"
      ],
      "id": "gUI6Xp3tpY0n",
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1320.901645036974\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n",
            "  result = getattr(ufunc, method)(*inputs, **kwargs)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PShxpuRb5UGE",
        "outputId": "9c0412bf-5da3-4353-e046-980a35f79253"
      },
      "source": [
        "def score_model(probs, threshold):\n",
        "    return np.array([1 if x > threshold else 0 for x in probs[:]])\n",
        "print(results.shape)\n",
        "scores = score_model(results, 0.52)\n",
        "unique, counts = np.unique(scores, return_counts=True)\n",
        "print(np.asarray((unique, counts)))\n",
        "data_train['label'].value_counts()"
      ],
      "id": "PShxpuRb5UGE",
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(4800,)\n",
            "[[   0    1]\n",
            " [1008 3792]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    3726\n",
              "0    1074\n",
              "Name: label, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "44RokEac8kCA",
        "outputId": "f91ff0cf-f3ca-4218-ee59-e77641f2421d"
      },
      "source": [
        "results = fn(data_test['x'], data_test['y'], coef)\n",
        "results = 1/(1+np.exp(-1*results))\n",
        "print(results)\n",
        "loss = -data_train['label']*np.log(results) - (1-data_train['label'])*np.log(1-results)\n",
        "loss = loss.sum()\n",
        "print(loss)\n",
        "scores = score_model(results, 0.52)\n",
        "unique, counts = np.unique(scores, return_counts=True)\n",
        "print(np.asarray((unique, counts)))\n",
        "data_test['label'].value_counts()"
      ],
      "id": "44RokEac8kCA",
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0       1.000000\n",
            "1       1.000000\n",
            "2       0.991559\n",
            "3       0.387533\n",
            "4       1.000000\n",
            "          ...   \n",
            "1195    0.490702\n",
            "1196    0.506616\n",
            "1197    1.000000\n",
            "1198    0.501689\n",
            "1199    0.771552\n",
            "Length: 1200, dtype: float64\n",
            "338.1805007380525\n",
            "[[  0   1]\n",
            " [255 945]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n",
            "  result = getattr(ufunc, method)(*inputs, **kwargs)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    953\n",
              "0    247\n",
              "Name: label, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WRL9CPeS9GBf",
        "outputId": "7aa38bfa-b243-4c5f-f1ea-edcb9462d52c"
      },
      "source": [
        "from sklearn import preprocessing\n",
        "import sklearn.model_selection as ms\n",
        "from sklearn import linear_model\n",
        "import sklearn.metrics as sklm\n",
        "\n",
        "def print_metrics(labels, scores):\n",
        "    metrics = sklm.precision_recall_fscore_support(labels, scores)\n",
        "    conf = sklm.confusion_matrix(labels, scores)\n",
        "    print('                 Confusion matrix')\n",
        "    print('                 Score positive    Score negative')\n",
        "    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n",
        "    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n",
        "    print('')\n",
        "    print('Accuracy  %0.2f' % sklm.accuracy_score(labels, scores))\n",
        "    print(' ')\n",
        "    print('           Positive      Negative')\n",
        "    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n",
        "    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n",
        "    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n",
        "    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])\n",
        "\n",
        "\n",
        "    \n",
        "print_metrics(data_test['label'], scores)"
      ],
      "id": "WRL9CPeS9GBf",
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                 Confusion matrix\n",
            "                 Score positive    Score negative\n",
            "Actual positive       189                58\n",
            "Actual negative        66               887\n",
            "\n",
            "Accuracy  0.90\n",
            " \n",
            "           Positive      Negative\n",
            "Num case      247           953\n",
            "Precision    0.74          0.94\n",
            "Recall       0.77          0.93\n",
            "F1           0.75          0.93\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vjG7xTSM9LFG"
      },
      "source": [
        "print(coef)"
      ],
      "id": "vjG7xTSM9LFG",
      "execution_count": null,
      "outputs": []
    }
  ]
}